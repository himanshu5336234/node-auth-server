// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "orderbook.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message PriceLevel
 */
export interface PriceLevel {
  /**
   * @generated from protobuf field: double price = 1;
   */
  price: number;
  /**
   * @generated from protobuf field: double quantity = 2;
   */
  quantity: number;
}
/**
 * @generated from protobuf message OrderBookSnapshot
 */
export interface OrderBookSnapshot {
  /**
   * @generated from protobuf field: string symbol = 1;
   */
  symbol: string;
  /**
   * @generated from protobuf field: uint64 sequence = 2;
   */
  sequence: bigint;
  /**
   * @generated from protobuf field: uint64 timestamp = 3;
   */
  timestamp: bigint;
  /**
   * @generated from protobuf field: repeated PriceLevel bids = 4;
   */
  bids: PriceLevel[];
  /**
   * @generated from protobuf field: repeated PriceLevel asks = 5;
   */
  asks: PriceLevel[];
}
/**
 * @generated from protobuf message OrderBookUpdate
 */
export interface OrderBookUpdate {
  /**
   * @generated from protobuf field: string symbol = 1;
   */
  symbol: string;
  /**
   * @generated from protobuf field: uint64 sequence = 2;
   */
  sequence: bigint;
  /**
   * @generated from protobuf field: repeated PriceLevel bids = 3;
   */
  bids: PriceLevel[];
  /**
   * @generated from protobuf field: repeated PriceLevel asks = 4;
   */
  asks: PriceLevel[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PriceLevel$Type extends MessageType<PriceLevel> {
  constructor() {
    super('PriceLevel', [
      { no: 1, name: 'price', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
      { no: 2, name: 'quantity', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ },
    ]);
  }
  create(value?: PartialMessage<PriceLevel>): PriceLevel {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.price = 0;
    message.quantity = 0;
    if (value !== undefined) reflectionMergePartial<PriceLevel>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PriceLevel,
  ): PriceLevel {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* double price */ 1:
          message.price = reader.double();
          break;
        case /* double quantity */ 2:
          message.quantity = reader.double();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PriceLevel,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* double price = 1; */
    if (message.price !== 0) writer.tag(1, WireType.Bit64).double(message.price);
    /* double quantity = 2; */
    if (message.quantity !== 0) writer.tag(2, WireType.Bit64).double(message.quantity);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message PriceLevel
 */
export const PriceLevel = new PriceLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderBookSnapshot$Type extends MessageType<OrderBookSnapshot> {
  constructor() {
    super('OrderBookSnapshot', [
      { no: 1, name: 'symbol', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'sequence',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: 'timestamp',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 4,
        name: 'bids',
        kind: 'message',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PriceLevel,
      },
      {
        no: 5,
        name: 'asks',
        kind: 'message',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PriceLevel,
      },
    ]);
  }
  create(value?: PartialMessage<OrderBookSnapshot>): OrderBookSnapshot {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.symbol = '';
    message.sequence = 0n;
    message.timestamp = 0n;
    message.bids = [];
    message.asks = [];
    if (value !== undefined) reflectionMergePartial<OrderBookSnapshot>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OrderBookSnapshot,
  ): OrderBookSnapshot {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string symbol */ 1:
          message.symbol = reader.string();
          break;
        case /* uint64 sequence */ 2:
          message.sequence = reader.uint64().toBigInt();
          break;
        case /* uint64 timestamp */ 3:
          message.timestamp = reader.uint64().toBigInt();
          break;
        case /* repeated PriceLevel bids */ 4:
          message.bids.push(PriceLevel.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated PriceLevel asks */ 5:
          message.asks.push(PriceLevel.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OrderBookSnapshot,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string symbol = 1; */
    if (message.symbol !== '') writer.tag(1, WireType.LengthDelimited).string(message.symbol);
    /* uint64 sequence = 2; */
    if (message.sequence !== 0n) writer.tag(2, WireType.Varint).uint64(message.sequence);
    /* uint64 timestamp = 3; */
    if (message.timestamp !== 0n) writer.tag(3, WireType.Varint).uint64(message.timestamp);
    /* repeated PriceLevel bids = 4; */
    for (let i = 0; i < message.bids.length; i++)
      PriceLevel.internalBinaryWrite(
        message.bids[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated PriceLevel asks = 5; */
    for (let i = 0; i < message.asks.length; i++)
      PriceLevel.internalBinaryWrite(
        message.asks[i],
        writer.tag(5, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OrderBookSnapshot
 */
export const OrderBookSnapshot = new OrderBookSnapshot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderBookUpdate$Type extends MessageType<OrderBookUpdate> {
  constructor() {
    super('OrderBookUpdate', [
      { no: 1, name: 'symbol', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'sequence',
        kind: 'scalar',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: 'bids',
        kind: 'message',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PriceLevel,
      },
      {
        no: 4,
        name: 'asks',
        kind: 'message',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: () => PriceLevel,
      },
    ]);
  }
  create(value?: PartialMessage<OrderBookUpdate>): OrderBookUpdate {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.symbol = '';
    message.sequence = 0n;
    message.bids = [];
    message.asks = [];
    if (value !== undefined) reflectionMergePartial<OrderBookUpdate>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: OrderBookUpdate,
  ): OrderBookUpdate {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string symbol */ 1:
          message.symbol = reader.string();
          break;
        case /* uint64 sequence */ 2:
          message.sequence = reader.uint64().toBigInt();
          break;
        case /* repeated PriceLevel bids */ 3:
          message.bids.push(PriceLevel.internalBinaryRead(reader, reader.uint32(), options));
          break;
        case /* repeated PriceLevel asks */ 4:
          message.asks.push(PriceLevel.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: OrderBookUpdate,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string symbol = 1; */
    if (message.symbol !== '') writer.tag(1, WireType.LengthDelimited).string(message.symbol);
    /* uint64 sequence = 2; */
    if (message.sequence !== 0n) writer.tag(2, WireType.Varint).uint64(message.sequence);
    /* repeated PriceLevel bids = 3; */
    for (let i = 0; i < message.bids.length; i++)
      PriceLevel.internalBinaryWrite(
        message.bids[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated PriceLevel asks = 4; */
    for (let i = 0; i < message.asks.length; i++)
      PriceLevel.internalBinaryWrite(
        message.asks[i],
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message OrderBookUpdate
 */
export const OrderBookUpdate = new OrderBookUpdate$Type();
